
# FeedbackWave Backend Implementation Guide

## Completed Components
- Database models for Users, Feedback, and Widgets
- Basic CRUD operations for all models
- Authentication endpoints (register, login, logout, me)
- Feedback endpoints (list, create, delete, mark as read)
- Widget endpoints (list, create, update, delete, stats)
- JWT-based authentication
- Password hashing with bcrypt
- Database connection with SQLAlchemy
- API routing setup

## Components to Implement
- Database migrations using Alembic
- Configuration for environment variables (using python-dotenv)
- User profile endpoints
- Custom middleware for logging and error handling

## Setup Instructions

1. Create a virtual environment:
```bash
python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate
```

2. Install dependencies:
```bash
pip install -r backend/requirements.txt
```

3. Set up .env file in the backend directory:
```
DATABASE_URL=postgresql://username:password@localhost/feedbackwave_db
SECRET_KEY=your_secret_key_here
ACCESS_TOKEN_EXPIRE_MINUTES=60
CORS_ORIGINS=["http://localhost:5173", "http://localhost:3000"]
PROJECT_NAME=FeedbackWave
API_V1_STR=/api
```

4. Initialize the database:
```bash
# Create PostgreSQL database
createdb -U <your_postgres_username> feedbackwave_db

# Run migrations
cd backend
alembic revision --autogenerate -m "Initial migration"
alembic upgrade head
```

5. Start the backend server:
```bash
cd backend
uvicorn app.main:app --reload --host 0.0.0.0 --port 8000
```

## API Integration Instructions

1. Frontend configuration:
   - Ensure the `VITE_API_URL` environment variable is set in your frontend project
   - For local development: `VITE_API_URL=http://localhost:8000`
   - For production: Set to your deployed backend URL

2. The frontend is already set up with API integration in `src/lib/api.ts` with:
   - Authentication services (register, login, logout, profile)
   - Feedback services (get, submit, delete, mark as read)
   - Widget services (CRUD operations)

3. Authentication flow:
   - Backend generates JWT tokens upon successful login
   - Frontend stores token in localStorage
   - API requests include token in Authorization header
   - Token expiration is handled by the API interceptor

4. CORS is configured on the backend to accept requests from specified origins

5. Error handling:
   - Backend returns appropriate HTTP status codes and error messages
   - Frontend has an interceptor that handles different error types and displays toast notifications

## Database Relationships

- User → Feedback: One-to-many (User can receive multiple feedback)
- User → Widgets: One-to-many (User can create multiple widgets)

## Security Considerations

- Passwords are hashed using bcrypt
- JWT tokens include expiration time
- API endpoints are protected with authentication requirements
- Database queries use parameterized statements to prevent SQL injection
- CORS is properly configured to restrict access

## Testing

- Run the backend tests:
```bash
cd backend
pytest tests/
```

## Deployment

For production deployment:
1. Build the frontend:
```bash
npm run build
```

2. Deploy backend with proper environment variables
3. Set up a production-grade database
4. Configure CORS settings for production domains
5. Use a reverse proxy (like Nginx) for the API

## Final Steps Before Launch

1. Update alembic.ini with your database connection string
2. Test all authentication flows (register, login, logout)
3. Test feedback submission and retrieval
4. Test widget creation and customization
5. Verify error handling and validation
6. Check database migrations for production deployments

## Known Limitations

- Rate limiting not yet implemented
- No email verification flow for user registration
- Basic analytics only, advanced metrics require premium subscription

## Troubleshooting

If experiencing database connection issues:
1. Verify PostgreSQL is running
2. Check DATABASE_URL format in .env file
3. Ensure database user has correct permissions
4. Try running `alembic current` to check migration status

For API connection issues:
1. Check CORS settings in backend/app/main.py
2. Verify frontend VITE_API_URL is correctly set
3. Check browser console for CORS errors
4. Ensure authentication token is properly stored and sent in requests
